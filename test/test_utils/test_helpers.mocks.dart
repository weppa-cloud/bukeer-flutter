// Mocks generated by Mockito 5.4.6 from annotations
// in bukeer/test/test_utils/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:bukeer/services/authorization_service.dart' as _i2;
import 'package:bukeer/services/error_service.dart' as _i5;
import 'package:bukeer/services/itinerary_service.dart' as _i8;
import 'package:bukeer/services/user_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthorizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationService extends _i1.Mock
    implements _i2.AuthorizationService {
  MockAuthorizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.UserRole> get userRoles => (super.noSuchMethod(
        Invocation.getter(#userRoles),
        returnValue: <_i2.UserRole>[],
      ) as List<_i2.UserRole>);

  @override
  Set<String> get userPermissions => (super.noSuchMethod(
        Invocation.getter(#userPermissions),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  bool get hasLoadedRoles => (super.noSuchMethod(
        Invocation.getter(#hasLoadedRoles),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdmin => (super.noSuchMethod(
        Invocation.getter(#isAdmin),
        returnValue: false,
      ) as bool);

  @override
  bool get isSuperAdmin => (super.noSuchMethod(
        Invocation.getter(#isSuperAdmin),
        returnValue: false,
      ) as bool);

  @override
  bool get isAgent => (super.noSuchMethod(
        Invocation.getter(#isAgent),
        returnValue: false,
      ) as bool);

  @override
  int get roleLevel => (super.noSuchMethod(
        Invocation.getter(#roleLevel),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> loadUserRoles(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadUserRoles,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool hasRole(_i2.RoleType? roleType) => (super.noSuchMethod(
        Invocation.method(
          #hasRole,
          [roleType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasAnyRole(List<_i2.RoleType>? roleTypes) => (super.noSuchMethod(
        Invocation.method(
          #hasAnyRole,
          [roleTypes],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasAllRoles(List<_i2.RoleType>? roleTypes) => (super.noSuchMethod(
        Invocation.method(
          #hasAllRoles,
          [roleTypes],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasPermission(String? permission) => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [permission],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasAnyPermission(List<String>? permissions) => (super.noSuchMethod(
        Invocation.method(
          #hasAnyPermission,
          [permissions],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasAllPermissions(List<String>? permissions) => (super.noSuchMethod(
        Invocation.method(
          #hasAllPermissions,
          [permissions],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canAccessResource(
    String? resourceType,
    String? action, {
    String? ownerId,
    String? currentUserId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canAccessResource,
          [
            resourceType,
            action,
          ],
          {
            #ownerId: ownerId,
            #currentUserId: currentUserId,
          },
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> authorize({
    required String? userId,
    String? resourceId,
    String? ownerId,
    List<_i2.RoleType>? requiredRoles,
    List<String>? requiredPermissions,
    String? resourceType,
    String? action,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authorize,
          [],
          {
            #userId: userId,
            #resourceId: resourceId,
            #ownerId: ownerId,
            #requiredRoles: requiredRoles,
            #requiredPermissions: requiredPermissions,
            #resourceType: resourceType,
            #action: action,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void clearRoles() => super.noSuchMethod(
        Invocation.method(
          #clearRoles,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ErrorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorService extends _i1.Mock implements _i5.ErrorService {
  MockErrorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.AppError> get errorHistory => (super.noSuchMethod(
        Invocation.getter(#errorHistory),
        returnValue: <_i5.AppError>[],
      ) as List<_i5.AppError>);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setErrorCallback(void Function(_i5.AppError)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleError(
    dynamic error, {
    StackTrace? stackTrace,
    String? context,
    _i5.ErrorSeverity? severity = _i5.ErrorSeverity.medium,
    _i5.ErrorType? type = _i5.ErrorType.unknown,
    Map<String, dynamic>? metadata,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #handleError,
          [error],
          {
            #stackTrace: stackTrace,
            #context: context,
            #severity: severity,
            #type: type,
            #metadata: metadata,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleApiError(
    dynamic error, {
    String? endpoint,
    int? statusCode,
    String? method,
    Map<String, dynamic>? requestData,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #handleApiError,
          [error],
          {
            #endpoint: endpoint,
            #statusCode: statusCode,
            #method: method,
            #requestData: requestData,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleNavigationError(
    dynamic error, {
    String? route,
    Map<String, String>? parameters,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #handleNavigationError,
          [error],
          {
            #route: route,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleValidationError(
    String? message, {
    String? field,
    dynamic value,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #handleValidationError,
          [message],
          {
            #field: field,
            #value: value,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleBusinessError(
    String? message, {
    String? operation,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #handleBusinessError,
          [message],
          {
            #operation: operation,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllErrors() => super.noSuchMethod(
        Invocation.method(
          #clearAllErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getUserMessage(_i5.AppError? error) => (super.noSuchMethod(
        Invocation.method(
          #getUserMessage,
          [error],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getUserMessage,
            [error],
          ),
        ),
      ) as String);

  @override
  List<_i5.ErrorAction> getSuggestedActions(_i5.AppError? error) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSuggestedActions,
          [error],
        ),
        returnValue: <_i5.ErrorAction>[],
      ) as List<_i5.ErrorAction>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i7.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasLoadedData => (super.noSuchMethod(
        Invocation.getter(#hasLoadedData),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdmin => (super.noSuchMethod(
        Invocation.getter(#isAdmin),
        returnValue: false,
      ) as bool);

  @override
  bool get isSuperAdmin => (super.noSuchMethod(
        Invocation.getter(#isSuperAdmin),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> initializeUserData() => (super.noSuchMethod(
        Invocation.method(
          #initializeUserData,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> refreshUserData() => (super.noSuchMethod(
        Invocation.method(
          #refreshUserData,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void clearUserData() => super.noSuchMethod(
        Invocation.method(
          #clearUserData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasRole(int? roleId) => (super.noSuchMethod(
        Invocation.method(
          #hasRole,
          [roleId],
        ),
        returnValue: false,
      ) as bool);

  @override
  dynamic getAgentInfo(String? field) => super.noSuchMethod(Invocation.method(
        #getAgentInfo,
        [field],
      ));

  @override
  dynamic getAccountInfo(String? field) => super.noSuchMethod(Invocation.method(
        #getAccountInfo,
        [field],
      ));
}

/// A class which mocks [ItineraryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockItineraryService extends _i1.Mock implements _i8.ItineraryService {
  MockItineraryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<dynamic> get itineraries => (super.noSuchMethod(
        Invocation.getter(#itineraries),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  Duration get cacheDuration => (super.noSuchMethod(
        Invocation.getter(#cacheDuration),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#cacheDuration),
        ),
      ) as Duration);

  @override
  bool get isCacheValid => (super.noSuchMethod(
        Invocation.getter(#isCacheValid),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  dynamic getItinerary(int? id) => super.noSuchMethod(Invocation.method(
        #getItinerary,
        [id],
      ));

  @override
  List<dynamic> getItineraryItems(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItineraryItems,
          [id],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<dynamic> getItineraryPassengers(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItineraryPassengers,
          [id],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> loadItineraries() => (super.noSuchMethod(
        Invocation.method(
          #loadItineraries,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> loadItineraryDetails(int? itineraryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadItineraryDetails,
          [itineraryId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int?> createItinerary({
    required String? name,
    required String? startDate,
    required String? endDate,
    String? agent,
    String? account,
    int? contact,
    String? currency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createItinerary,
          [],
          {
            #name: name,
            #startDate: startDate,
            #endDate: endDate,
            #agent: agent,
            #account: account,
            #contact: contact,
            #currency: currency,
          },
        ),
        returnValue: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);

  @override
  _i3.Future<bool> updateItinerary({
    required int? itineraryId,
    String? name,
    String? startDate,
    String? endDate,
    String? agent,
    int? contact,
    String? currency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItinerary,
          [],
          {
            #itineraryId: itineraryId,
            #name: name,
            #startDate: startDate,
            #endDate: endDate,
            #agent: agent,
            #contact: contact,
            #currency: currency,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> addItineraryItem({
    required int? itineraryId,
    required String? type,
    required Map<String, dynamic>? itemData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItineraryItem,
          [],
          {
            #itineraryId: itineraryId,
            #type: type,
            #itemData: itemData,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteItinerary(int? itineraryId) => (super.noSuchMethod(
        Invocation.method(
          #deleteItinerary,
          [itineraryId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  List<dynamic> searchItineraries(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchItineraries,
          [query],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<dynamic> getItinerariesByStatus(String? status) => (super.noSuchMethod(
        Invocation.method(
          #getItinerariesByStatus,
          [status],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  Map<String, double> calculateItineraryTotals(int? itineraryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateItineraryTotals,
          [itineraryId],
        ),
        returnValue: <String, double>{},
      ) as Map<String, double>);

  @override
  _i3.Future<T?> loadData<T>(
    _i3.Future<T> Function()? loader, {
    String? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [loader],
          {#context: context},
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  T? safeGet<T>(
    dynamic data,
    String? path, {
    T? defaultValue,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #safeGet,
        [
          data,
          path,
        ],
        {#defaultValue: defaultValue},
      )) as T?);

  @override
  _i3.Future<List<T>> batchLoad<T>(List<_i3.Future<T>>? operations) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchLoad,
          [operations],
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
