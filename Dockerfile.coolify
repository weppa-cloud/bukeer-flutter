# Dockerfile optimizado para Coolify - Bukeer Flutter Web
FROM ubuntu:20.04 AS builder

# Evitar prompts interactivos
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    curl \
    git \
    unzip \
    xz-utils \
    zip \
    libglu1-mesa \
    wget \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Instalar Flutter
ENV FLUTTER_VERSION=3.24.0
ENV FLUTTER_HOME=/flutter
ENV PATH="$FLUTTER_HOME/bin:$PATH"

RUN git clone --depth 1 --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git $FLUTTER_HOME && \
    flutter config --no-analytics && \
    flutter precache --web

# Crear directorio de trabajo
WORKDIR /app

# Copiar archivos del proyecto
COPY pubspec.yaml pubspec.lock ./
RUN flutter pub get

# Copiar el resto del c贸digo
COPY . .

# Build de la aplicaci贸n web
RUN flutter build web --release --web-renderer html

# Etapa de producci贸n con Nginx
FROM nginx:alpine

# Instalar dependencias adicionales
RUN apk add --no-cache curl

# Copiar archivos construidos
COPY --from=builder /app/build/web /usr/share/nginx/html

# Configuraci贸n simple de Nginx para Flutter Web
RUN echo 'server { \
    listen 80; \
    server_name _; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    location /health { \
        return 200 "healthy"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Instalar curl para health checks
RUN apk add --no-cache curl

# Health check simple
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Exponer puerto
EXPOSE 80

# Usar comando simple de nginx
CMD ["nginx", "-g", "daemon off;"]