# Dockerfile optimizado para Coolify - Bukeer Flutter Web

FROM cirrusci/flutter:stable AS builder

# Configurar variables de entorno
ENV FLUTTER_WEB=true
ENV FLUTTER_ROOT=/usr/local/flutter

# Crear directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración
COPY pubspec.yaml pubspec.lock ./

# Instalar dependencias
RUN flutter pub get

# Copiar código fuente
COPY . .

# Build de la aplicación web
RUN flutter build web --release --dart-define=FLUTTER_WEB_AUTO_DETECT=true

# Etapa de producción con Nginx
FROM nginx:alpine

# Instalar dependencias adicionales
RUN apk add --no-cache curl

# Copiar archivos construidos
COPY --from=builder /app/build/web /usr/share/nginx/html

# Crear configuración de Nginx optimizada para Flutter Web
RUN cat > /etc/nginx/conf.d/default.conf <<'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Configuración para SPA (Single Page Application)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Headers de seguridad
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # Cache para assets estáticos
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
    }

    # Cache para manifest y service worker
    location ~* \.(webmanifest|manifest\.json|sw\.js)$ {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Compresión gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Security headers
    location ~ /\. {
        deny all;
    }
}
EOF

# Crear script de entrada personalizado
RUN cat > /docker-entrypoint.sh <<'EOF'
#!/bin/sh
set -e

# Verificar que los archivos estén presentes
if [ ! -f "/usr/share/nginx/html/index.html" ]; then
    echo "Error: index.html no encontrado"
    exit 1
fi

# Configurar timezone
if [ -n "$TZ" ]; then
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
    echo $TZ > /etc/timezone
fi

# Ejecutar nginx
exec nginx -g "daemon off;"
EOF

RUN chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Exponer puerto
EXPOSE 80

# Configurar usuario no root para seguridad
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chmod -R 755 /usr/share/nginx/html

USER nginx

# Entrada
ENTRYPOINT ["/docker-entrypoint.sh"]